{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","qanda/tests/adapters/application.jshint.lint-test.js","qanda/tests/app.jshint.lint-test.js","qanda/tests/components/answer-tile.jshint.lint-test.js","qanda/tests/components/new-answer.jshint.lint-test.js","qanda/tests/components/new-question.jshint.lint-test.js","qanda/tests/components/question-detail.jshint.lint-test.js","qanda/tests/components/question-tile.jshint.lint-test.js","qanda/tests/components/update-question.jshint.lint-test.js","qanda/tests/helpers/create-offline-ref.js","qanda/tests/helpers/destroy-app.js","qanda/tests/helpers/destroy-app.jshint.lint-test.js","qanda/tests/helpers/destroy-firebase-apps.js","qanda/tests/helpers/module-for-acceptance.js","qanda/tests/helpers/module-for-acceptance.jshint.lint-test.js","qanda/tests/helpers/replace-app-ref.js","qanda/tests/helpers/replace-firebase-app-service.js","qanda/tests/helpers/resolver.js","qanda/tests/helpers/resolver.jshint.lint-test.js","qanda/tests/helpers/start-app.js","qanda/tests/helpers/start-app.jshint.lint-test.js","qanda/tests/helpers/stub-firebase.js","qanda/tests/helpers/unstub-firebase.js","qanda/tests/integration/components/answer-tile-test.js","qanda/tests/integration/components/answer-tile-test.jshint.lint-test.js","qanda/tests/integration/components/new-answer-test.js","qanda/tests/integration/components/new-answer-test.jshint.lint-test.js","qanda/tests/integration/components/new-question-test.js","qanda/tests/integration/components/new-question-test.jshint.lint-test.js","qanda/tests/integration/components/question-detail-test.js","qanda/tests/integration/components/question-detail-test.jshint.lint-test.js","qanda/tests/integration/components/question-tile-test.js","qanda/tests/integration/components/question-tile-test.jshint.lint-test.js","qanda/tests/integration/components/update-question-test.js","qanda/tests/integration/components/update-question-test.jshint.lint-test.js","qanda/tests/models/answer.jshint.lint-test.js","qanda/tests/models/question.jshint.lint-test.js","qanda/tests/resolver.jshint.lint-test.js","qanda/tests/router.jshint.lint-test.js","qanda/tests/routes/about.jshint.lint-test.js","qanda/tests/routes/contact.jshint.lint-test.js","qanda/tests/routes/index.jshint.lint-test.js","qanda/tests/routes/question.jshint.lint-test.js","qanda/tests/test-helper.js","qanda/tests/test-helper.jshint.lint-test.js","qanda/tests/unit/models/answer-test.js","qanda/tests/unit/models/answer-test.jshint.lint-test.js","qanda/tests/unit/models/question-test.js","qanda/tests/unit/models/question-test.jshint.lint-test.js","qanda/tests/unit/routes/about-test.js","qanda/tests/unit/routes/about-test.jshint.lint-test.js","qanda/tests/unit/routes/contact-test.js","qanda/tests/unit/routes/contact-test.jshint.lint-test.js","qanda/tests/unit/routes/index-test.js","qanda/tests/unit/routes/index-test.jshint.lint-test.js","qanda/tests/unit/routes/question-test.js","qanda/tests/unit/routes/question-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('qanda/tests/adapters/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass jshint.\\nadapters/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nadapters/application.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('qanda/tests/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass jshint.\\napp.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 4, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 6, col 1, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 13, col 3, \\'object short notation\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 18, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n7 errors');\n  });\n});","define('qanda/tests/components/answer-tile.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/answer-tile.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/answer-tile.js should pass jshint.\\ncomponents/answer-tile.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/answer-tile.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('qanda/tests/components/new-answer.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/new-answer.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/new-answer.js should pass jshint.\\ncomponents/new-answer.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/new-answer.js: line 3, col 3, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/new-answer.js: line 6, col 7, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/new-answer.js: line 9, col 7, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n4 errors');\n  });\n});","define('qanda/tests/components/new-question.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/new-question.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/new-question.js should pass jshint.\\ncomponents/new-question.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/new-question.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/new-question.js: line 6, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/new-question.js: line 9, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n4 errors');\n  });\n});","define('qanda/tests/components/question-detail.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/question-detail.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/question-detail.js should pass jshint.\\ncomponents/question-detail.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/question-detail.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/question-detail.js: line 6, col 9, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/question-detail.js: line 11, col 9, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n4 errors');\n  });\n});","define('qanda/tests/components/question-tile.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/question-tile.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/question-tile.js should pass jshint.\\ncomponents/question-tile.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/question-tile.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('qanda/tests/components/update-question.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/update-question.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/update-question.js should pass jshint.\\ncomponents/update-question.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/update-question.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/update-question.js: line 6, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/update-question.js: line 7, col 43, Missing semicolon.\\ncomponents/update-question.js: line 9, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n5 errors');\n  });\n});","define('qanda/tests/helpers/create-offline-ref', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = createOfflineRef;\n\n  /**\n   * Creates an offline firebase reference with optional initial data and url.\n   *\n   * Be sure to `stubfirebase()` and `unstubfirebase()` in your tests!\n   *\n   * @param  {!Object} [initialData]\n   * @param  {string} [url]\n   * @param  {string} [apiKey]\n   * @return {!firebase.database.Reference}\n   */\n\n  function createOfflineRef(initialData) {\n    var url = arguments.length <= 1 || arguments[1] === undefined ? 'https://emberfire-tests-2c814.firebaseio.com' : arguments[1];\n    var apiKey = arguments.length <= 2 || arguments[2] === undefined ? 'AIzaSyC9-ndBb1WR05rRF1msVQDV6EBqB752m6o' : arguments[2];\n\n    if (!_firebase['default']._unStub) {\n      throw new Error('Please use stubFirebase() before calling this method');\n    }\n\n    var config = {\n      apiKey: apiKey,\n      authDomain: 'emberfire-tests-2c814.firebaseapp.com',\n      databaseURL: url,\n      storageBucket: ''\n    };\n\n    var app = undefined;\n\n    try {\n      app = _firebase['default'].app();\n    } catch (e) {\n      app = _firebase['default'].initializeApp(config);\n    }\n\n    var ref = app.database().ref();\n\n    app.database().goOffline(); // must be called after the ref is created\n\n    if (initialData) {\n      ref.set(initialData);\n    }\n\n    return ref;\n  }\n});","define('qanda/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('qanda/tests/helpers/destroy-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('qanda/tests/helpers/destroy-firebase-apps', ['exports', 'ember', 'firebase'], function (exports, _ember, _firebase) {\n  exports['default'] = destroyFirebaseApps;\n  var run = _ember['default'].run;\n\n  /**\n   * Destroy all Firebase apps.\n   */\n\n  function destroyFirebaseApps() {\n    var deletions = _firebase['default'].apps.map(function (app) {\n      return app['delete']();\n    });\n    _ember['default'].RSVP.all(deletions).then(function () {\n      return run(function () {\n        // NOOP to delay run loop until the apps are destroyed\n      });\n    });\n  }\n});","define('qanda/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'qanda/tests/helpers/start-app', 'qanda/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _qandaTestsHelpersStartApp, _qandaTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _qandaTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _qandaTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('qanda/tests/helpers/module-for-acceptance.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('qanda/tests/helpers/replace-app-ref', ['exports'], function (exports) {\n  exports['default'] = replaceAppRef;\n  /**\n   * Updates the supplied app adapter's Firebase reference.\n   *\n   * @param  {!Ember.Application} app\n   * @param  {!firebase.database.Reference} ref\n   * @param  {string} [model]  The model, if overriding a model specific adapter\n   */\n\n  function replaceAppRef(app, ref) {\n    var model = arguments.length <= 2 || arguments[2] === undefined ? 'application' : arguments[2];\n\n    app.register('service:firebaseMock', ref, { instantiate: false, singleton: true });\n    app.inject('adapter:firebase', 'firebase', 'service:firebaseMock');\n    app.inject('adapter:' + model, 'firebase', 'service:firebaseMock');\n  }\n});","define('qanda/tests/helpers/replace-firebase-app-service', ['exports'], function (exports) {\n  exports['default'] = replaceFirebaseAppService;\n  /**\n   * Replaces the `firebaseApp` service with your own using injection overrides.\n   *\n   * This is usually not needed in test modules, where you can re-register over\n   * existing names in the registry, but in acceptance tests, some registry/inject\n   * magic is needed.\n   *\n   * @param  {!Ember.Application} app\n   * @param  {!Object} newService\n   */\n\n  function replaceFirebaseAppService(app, newService) {\n    app.register('service:firebaseAppMock', newService, { instantiate: false, singleton: true });\n    app.inject('torii-provider:firebase', 'firebaseApp', 'service:firebaseAppMock');\n    app.inject('torii-adapter:firebase', 'firebaseApp', 'service:firebaseAppMock');\n  }\n});","define('qanda/tests/helpers/resolver', ['exports', 'qanda/resolver', 'qanda/config/environment'], function (exports, _qandaResolver, _qandaConfigEnvironment) {\n\n  var resolver = _qandaResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _qandaConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _qandaConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('qanda/tests/helpers/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('qanda/tests/helpers/start-app', ['exports', 'ember', 'qanda/app', 'qanda/config/environment'], function (exports, _ember, _qandaApp, _qandaConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _qandaConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _qandaApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('qanda/tests/helpers/start-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('qanda/tests/helpers/stub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = stubFirebase;\n\n  /**\n   * When a reference is in offline mode it will not call any callbacks\n   * until it goes online and resyncs. The ref will have already\n   * updated its internal cache with the changed values so we shortcut\n   * the process and call the supplied callbacks immediately (asynchronously).\n   */\n\n  function stubFirebase() {\n    // check for existing stubbing\n    if (!_firebase['default']._unStub) {\n      var originalSet = _firebase['default'].database.Reference.prototype.set;\n      var originalUpdate = _firebase['default'].database.Reference.prototype.update;\n      var originalRemove = _firebase['default'].database.Reference.prototype.remove;\n\n      _firebase['default']._unStub = function () {\n        _firebase['default'].database.Reference.prototype.set = originalSet;\n        _firebase['default'].database.Reference.prototype.update = originalUpdate;\n        _firebase['default'].database.Reference.prototype.remove = originalRemove;\n      };\n\n      _firebase['default'].database.Reference.prototype.set = function (data, cb) {\n        originalSet.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase['default'].database.Reference.prototype.update = function (data, cb) {\n        originalUpdate.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase['default'].database.Reference.prototype.remove = function (cb) {\n        originalRemove.call(this);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n    }\n  }\n});","define('qanda/tests/helpers/unstub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = unstubFirebase;\n\n  function unstubFirebase() {\n    if (typeof _firebase['default']._unStub === 'function') {\n      _firebase['default']._unStub();\n      delete _firebase['default']._unStub;\n    }\n  }\n});","define('qanda/tests/integration/components/answer-tile-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('answer-tile', 'Integration | Component | answer tile', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '7KfRqliX',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"answer-tile\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'r2RVMDqm',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"answer-tile\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('qanda/tests/integration/components/answer-tile-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/answer-tile-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/answer-tile-test.js should pass jshint.');\n  });\n});","define('qanda/tests/integration/components/new-answer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('new-answer', 'Integration | Component | new answer', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'UrbrHOGc',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"new-answer\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'icfBdkuz',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"new-answer\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('qanda/tests/integration/components/new-answer-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/new-answer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/new-answer-test.js should pass jshint.');\n  });\n});","define('qanda/tests/integration/components/new-question-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('new-question', 'Integration | Component | new question', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '/efO11Tq',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"new-question\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '0JLYuYQB',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"new-question\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('qanda/tests/integration/components/new-question-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/new-question-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/new-question-test.js should pass jshint.');\n  });\n});","define('qanda/tests/integration/components/question-detail-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('question-detail', 'Integration | Component | question detail', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'YMQnSNi+',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"question-detail\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'Is4f2gVO',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"question-detail\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('qanda/tests/integration/components/question-detail-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/question-detail-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/question-detail-test.js should pass jshint.');\n  });\n});","define('qanda/tests/integration/components/question-tile-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('question-tile', 'Integration | Component | question tile', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'OGBIrwCT',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"question-tile\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '+CYz501K',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"question-tile\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('qanda/tests/integration/components/question-tile-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/question-tile-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/question-tile-test.js should pass jshint.');\n  });\n});","define('qanda/tests/integration/components/update-question-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('update-question', 'Integration | Component | update question', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '7pIKq4q1',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"update-question\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'O2q4HRYt',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"update-question\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('qanda/tests/integration/components/update-question-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/update-question-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/update-question-test.js should pass jshint.');\n  });\n});","define('qanda/tests/models/answer.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/answer.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/answer.js should pass jshint.\\nmodels/answer.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/answer.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('qanda/tests/models/question.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/question.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/question.js should pass jshint.\\nmodels/question.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/question.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('qanda/tests/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'resolver.js should pass jshint.\\nresolver.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nresolver.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('qanda/tests/router.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass jshint.\\nrouter.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nrouter.js: line 15, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('qanda/tests/routes/about.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/about.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/about.js should pass jshint.\\nroutes/about.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/about.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('qanda/tests/routes/contact.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/contact.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/contact.js should pass jshint.\\nroutes/contact.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/contact.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('qanda/tests/routes/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/index.js should pass jshint.\\nroutes/index.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/index.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/index.js: line 4, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/index.js: line 11, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n4 errors');\n  });\n});","define('qanda/tests/routes/question.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/question.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/question.js should pass jshint.\\nroutes/question.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/question.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/question.js: line 4, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/question.js: line 8, col 9, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/question.js: line 12, col 9, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/question.js: line 16, col 9, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n6 errors');\n  });\n});","define('qanda/tests/test-helper', ['exports', 'qanda/tests/helpers/resolver', 'ember-qunit'], function (exports, _qandaTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_qandaTestsHelpersResolver['default']);\n});","define('qanda/tests/test-helper.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('qanda/tests/unit/models/answer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('answer', 'Unit | Model | answer', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('qanda/tests/unit/models/answer-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/answer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/answer-test.js should pass jshint.');\n  });\n});","define('qanda/tests/unit/models/question-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('question', 'Unit | Model | question', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('qanda/tests/unit/models/question-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/question-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/question-test.js should pass jshint.');\n  });\n});","define('qanda/tests/unit/routes/about-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:about', 'Unit | Route | about', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('qanda/tests/unit/routes/about-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/about-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass jshint.');\n  });\n});","define('qanda/tests/unit/routes/contact-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:contact', 'Unit | Route | contact', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('qanda/tests/unit/routes/contact-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/contact-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/contact-test.js should pass jshint.');\n  });\n});","define('qanda/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('qanda/tests/unit/routes/index-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('qanda/tests/unit/routes/question-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:question', 'Unit | Route | question', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('qanda/tests/unit/routes/question-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/question-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/question-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('qanda/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}